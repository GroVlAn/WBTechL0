version: "3.7"

services:
  orders:
    container_name: "wb_service_order"
    build:
      context: ./
      dockerfile: ordersDockerfile
    command: ./orders --prod
    restart: always
    ports:
      - "8010:8010"
    networks:
      - postgres
    depends_on:
      orders_db:
        condition: service_healthy

  data_generator:
    container_name: "wb_service_data_generator"
    build:
      context: ./
      dockerfile: dataGeneratorDockerfile
    command: ./dataGenerator
    restart: always
    ports:
      - "8020:8020"
    networks:
      - postgres
    depends_on:
      - orders_db

  orders_db:
    container_name: "wb_orders_db"
    restart: always
    image: postgres:latest
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      -  ./database/db/wb_orders_db:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    expose:
      - 5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U root -d wb_orders" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - postgres

  pgadmin:
    container_name: "orders_pg_admin"
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - ./database/pgadmin:/var/liv/pgadmin
    ports:
      - "5050:80"
    restart: always
    networks:
      - postgres

  migrate:
    image: migrate/migrate
    networks:
      - postgres
    volumes:
      - ./database/migrations:/migrations
    command: [
      "-path",
      "/migrations",
      "-database",
      "postgres://${DB_USER}:${DB_PASSWORD}@wb_orders_db:5432/${DB_NAME}?sslmode=disable",
      "up"
    ]
    links:
      - orders_db
    depends_on:
      orders_db:
        condition: service_healthy

volumes:
  wb_orders_db:

networks:
  postgres:
    driver: bridge
